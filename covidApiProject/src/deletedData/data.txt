func getAll() {
	resp1, err := http.Get("https://covid-api.mmediagroup.fr/v1/cases")
	if err != nil {
		log.Fatalln(err)
	}

	bodyBytes1, _ := ioutil.ReadAll(resp1.Body)
	//fmt.Println(resp1.Body)
	bodyString1 := string(bodyBytes1)
	var p fastjson.Parser
	v, err := p.Parse(bodyString1)
	if err != nil {
		log.Fatal(err)
	}
	var keyValues []string
	// Visit all the items in the top object
	v.GetObject().Visit(func(k []byte, v *fastjson.Value) {
		//fmt.Printf("key=%s, value=%s\n", k,v)
		keyValues = append(keyValues, string(k))
		//fmt.Printf("%s", k)
		//fmt.Println(" ")
		//fmt.Println(v)

	})
	//fmt.Println(bodyString1)
	defer resp1.Body.Close()
	//fmt.Println(keyValues)
	len := len(keyValues)

	for i := 0; i < len; i++ {
		type Info struct {
			Countries AllInfo `json:"KeyValues[i]"`
		}
		fmt.Println(keyValues[i])
		var info Info
		json.Unmarshal(bodyBytes1, &info)
		//values := CountryData{Confirmed: info.Countries.All.Confirmed}
		fmt.Println("@@@@@@@@@@@@@@@@@@@")
		//fmt.Println(values)

	}

}
func getValues() {
	resp1, err := http.Get("https://covid-api.mmediagroup.fr/v1/cases")
	if err != nil {
		log.Fatalln(err)
	}
	res := []Details{}



	bodyBytes1, _ := ioutil.ReadAll(resp1.Body)
	defer resp1.Body.Close()
	var msg map[string]interface{}
	json.Unmarshal(bodyBytes1, &msg)

	bodyString1 := string(bodyBytes1)
	var p fastjson.Parser
	v, err := p.Parse(bodyString1)
	if err != nil {
		log.Fatal(err)
	}
	var keyValues []string
	// Visit all the items in the top object
	v.GetObject().Visit(func(k []byte, v *fastjson.Value) {
		//fmt.Printf("key=%s, value=%s\n", k,v)
		keyValues = append(keyValues, string(k))
		//fmt.Printf("%s", k)
		//fmt.Println(" ")
		//fmt.Println(v)

	})
	//var res []string
	//var res []Details
	//var covidData []string
	//var covidCountriesData map[string]CountryData
	for _, i := range keyValues {
		//fmt.Println(msg[i])//countries values
		all := msg[i].(map[string]interface{})
		for keyy, value := range all {
			if keyy == "All" {
				//fmt.Println(keyy)
				//fmt.Println("#################")
				//fmt.Println(value.(map[string]interface{}))
				allV := value.(map[string]interface{})
				//allV := value.(map[string]CountryData)

				//fmt.Println(allV)
				//fmt.Println(reflect.TypeOf(allV))
				//data, _ := json.Marshal(allV)
				//fmt.Println(string(data))
				//dataString := string(data)
				//fmt.Println(dataString)
				details := Details{}
				var confirmed float64
				var recovered float64
				var deaths float64
				var country string
				var capital_city string
				var updated string
				//fmt.Println("Country:", i)
				country = i
				for k1, v1 := range allV {
					if k1 == "confirmed" && v1 != nil {
						confirmed = v1.(float64)
					}
					if k1 == "recovered" && v1 != nil {
						recovered = v1.(float64)
					}
					if k1 == "deaths" && v1 != nil {
						deaths = v1.(float64)
					}
					if k1 == "country" && v1 != nil {
						country = v1.(string)
						//country = i
					}
					if k1 == "capital_city" && v1 != nil {
						capital_city = v1.(string)
					}
					if k1 == "updated" && v1 != nil {
						updated = v1.(string)
					}

					//fmt.Println(k1, ":", v1)
					//mapstructure.Decode(v1, &details)
					//details = v1
					//byteData, _ := json.Marshal(v1)
					//fmt.Println(string(byteData))
					//byteStringData := string(byteData)
					//arrayForm := strings.Split(byteStringData, ",")
					//	res = append(res, k1+":"+byteStringData)
					//fmt.Println(res)

					//printData := k1
					//details := v1
					//res = append(res, details)
					//fmt.Println(printData, ":", details)
					//web.Execute(w, details)
					//country = i

				}
				details = Details{Confirmed: confirmed, Recovered: recovered, Deaths: deaths, Capital_City: capital_city, Country: country, Updated: updated}
				res = append(res, details)

			}
			//fmt.Println(" ")

			//covidCountriesData = append(covidCountriesData, allV)

		} //states values
	}
	fmt.Println(res)
}